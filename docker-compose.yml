version: '3.8'

services:
  # OpenVPN Cluster Manager
  openvpn-manager:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: openvpn-manager
    restart: unless-stopped
    ports:
      - "8822:8822"
    volumes:
      # Application data
      - ./data:/app/data
      - ./backups:/app/backups
      - ./logs:/app/logs
      
      # OpenVPN configuration (if running on host)
      - /etc/openvpn:/etc/openvpn:ro
      
      # SSH keys for cluster management
      - ./ssh-keys:/app/ssh-keys:ro
      
    environment:
      # Application settings
      - OPENVPN_MANAGER_HOST=0.0.0.0
      - OPENVPN_MANAGER_PORT=8822
      - OPENVPN_MANAGER_DEBUG=false
      
      # Authentication
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=your-secure-password-here
      
      # Database
      - DATABASE_PATH=/app/data/vpn_history.db
      
      # OpenVPN settings
      - OPENVPN_CONFIG_PATH=/etc/openvpn/server
      - EASYRSA_PATH=/etc/openvpn/server/easy-rsa
      
      # Logging
      - LOG_LEVEL=INFO
      - LOG_FILE=/app/logs/app.log
      
    networks:
      - openvpn-net
    
    # Required for OpenVPN management
    privileged: true
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8822/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: openvpn-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - openvpn-manager
    networks:
      - openvpn-net
    environment:
      - NGINX_HOST=your-domain.com
      - NGINX_PORT=80

  # Database backup service (optional)
  backup:
    image: alpine:latest
    container_name: openvpn-backup
    restart: unless-stopped
    volumes:
      - ./data:/data:ro
      - ./backups:/backups
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - RETENTION_DAYS=30
    command: >
      sh -c "
        echo '#!/bin/sh' > /backup.sh &&
        echo 'DATE=$$(date +%Y%m%d_%H%M%S)' >> /backup.sh &&
        echo 'tar -czf /backups/database_backup_$$DATE.tar.gz -C /data .' >> /backup.sh &&
        echo 'find /backups -name \"database_backup_*.tar.gz\" -mtime +$$RETENTION_DAYS -delete' >> /backup.sh &&
        chmod +x /backup.sh &&
        echo '$$BACKUP_SCHEDULE /backup.sh' | crontab - &&
        crond -f -l 2
      "
    networks:
      - openvpn-net

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: openvpn-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - openvpn-net
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: openvpn-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - openvpn-net
    profiles:
      - monitoring

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  openvpn-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 